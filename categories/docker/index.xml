<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on l1nker4&#39;s Blog</title>
    <link>http://localhost:1313/categories/docker/</link>
    <description>Recent content in Docker on l1nker4&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 May 2019 20:18:39 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker学习笔记</title>
      <link>http://localhost:1313/posts/%E5%B7%A5%E5%85%B7/docker/</link>
      <pubDate>Mon, 27 May 2019 20:18:39 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%B7%A5%E5%85%B7/docker/</guid>
      <description>&lt;h2 id=&#34;1docker概念&#34;&gt;1.Docker概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;模型&#34;&gt;模型&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/docker/docker.png&#34; alt=&#34;docker.png&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;虚拟机运行在虚拟的硬件上，应用运行在虚拟机内核上，而Docker是机器上的一个进程，Docker应用是Docker的一个子进程。&lt;/li&gt;&#xA;&lt;li&gt;Docker是对Linux容器（LXC）的一种封装，提供简单易用的接口，Docker是目前最流行的Linux容器解决方案。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;docker用途&#34;&gt;Docker用途&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提供一次性的环境。主要用于测试。&lt;/li&gt;&#xA;&lt;li&gt;提供云服务&lt;/li&gt;&#xA;&lt;li&gt;组建微服务架构。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;docker引擎&#34;&gt;Docker引擎&lt;/h3&gt;&#xA;&lt;p&gt;Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一种服务器，它是一种称为守护进程并且长时间运行的程序。&lt;/li&gt;&#xA;&lt;li&gt;REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。&lt;/li&gt;&#xA;&lt;li&gt;一个有命令行界面工具的客户端。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/docker/620140640_31678.png&#34; alt=&#34;620140640_31678.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;docker系统架构&#34;&gt;Docker系统架构&lt;/h3&gt;&#xA;&lt;p&gt;Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。&lt;/p&gt;&#xA;&lt;p&gt;Docker 容器通过 Docker 镜像来创建。&lt;/p&gt;&#xA;&lt;p&gt;容器和对象的关系可以类似于对象和类。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/docker/262150629_86976.png&#34; alt=&#34;262150629_86976.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;docker镜像&#34;&gt;Docker镜像&lt;/h3&gt;&#xA;&lt;p&gt;在Linux下，内核启动会挂载&lt;code&gt;root&lt;/code&gt;文件系统，Docker镜像就相当于一个&lt;code&gt;root&lt;/code&gt;文件系统，它除了提供容器运行时所需的程序，资源，配置之外，还有一些配置参数（匿名卷，环境变量，用户）。&lt;/p&gt;&#xA;&lt;p&gt;Docker镜像使用分层存储技术，它并非像ISO镜像那样的文件，镜像是一个虚拟的概念，它是由一组文件系统构成。&lt;/p&gt;&#xA;&lt;h3 id=&#34;docker容器&#34;&gt;Docker容器&lt;/h3&gt;&#xA;&lt;p&gt;容器的本质是进程，容器进程运行于属于自己的命名空间，它可以拥有自己的&lt;code&gt;root&lt;/code&gt;文件系统，自己的网络配置等宿主机可以有的东西。&lt;/p&gt;&#xA;&lt;p&gt;每一个容器运行时，都是以镜像为基础层，在其上创建一个当前容器的存储层，可以称这个为容器运行时读写而准备的存储层为&lt;strong&gt;容器存储层&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;docker仓库&#34;&gt;Docker仓库&lt;/h3&gt;&#xA;&lt;p&gt;存放镜像的地方&lt;/p&gt;&#xA;&lt;h2 id=&#34;2安装docker&#34;&gt;2.安装Docker&lt;/h2&gt;&#xA;&lt;h4 id=&#34;1获取脚本并下载&#34;&gt;1.获取脚本并下载&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//从官网获取安装脚本&#xA;$ curl -fsSL get.docker.com -o get-docker.sh&#xA;//使用AzureChinaCloud镜像脚本&#xA;$ sudo sh get-docker.sh --mirror AzureChinaCloud&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;2启动docker&#34;&gt;2.启动Docker&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo systemctl enable docker&#xA;$ sudo systemctl start docker&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3建立docker用户组&#34;&gt;3.建立Docker用户组&lt;/h4&gt;&#xA;&lt;p&gt;docker命令只有root用户和docker组的用户才能访问docker引擎&lt;/p&gt;&#xA;&lt;h5 id=&#34;建立docker组&#34;&gt;建立Docker组&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo groupadd docker&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;将当前用户加入docker组&#34;&gt;将当前用户加入Docker组&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo usermod -aG docker $USER&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;校验是否安装成功&#34;&gt;校验是否安装成功&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;l1nker4@zero:~$ docker version &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Client:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Version:           18.09.6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; API version:       1.39&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Go version:        go1.10.8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Git commit:        481bc77&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Built:             Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 02:35:57 &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; OS/Arch:           linux/amd64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Experimental:      false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Server: Docker Engine - Community&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Engine:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Version:          18.09.6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  API version:      1.39 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;minimum version 1.12&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Go version:       go1.10.8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Git commit:       481bc77&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Built:            Sat May  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 01:59:36 &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  OS/Arch:          linux/amd64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Experimental:     false&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-添加镜像加速器&#34;&gt;4. 添加镜像加速器&lt;/h4&gt;&#xA;&lt;h5 id=&#34;新建daemonjson文件&#34;&gt;新建daemon.json文件&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo touch /etc/docker/daemon.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;添加内容&#34;&gt;添加内容&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;registry-mirrors&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://registry.docker-cn.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3常用命令&#34;&gt;3.常用命令&lt;/h2&gt;&#xA;&lt;h4 id=&#34;1镜像操作&#34;&gt;1.镜像操作&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;名称&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;命令&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;搜索&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker search xxx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;搜索镜像&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;拉取&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker pull xxx&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;从仓库拉取镜像&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;列表&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker images&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;列出所有镜像&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;删除&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker rmi imageID&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;删除镜像&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;2容器操作&#34;&gt;2.容器操作&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;名称&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;命令&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;运行&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker run &amp;ndash;name container-name -d image-name&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;&amp;ndash;name：自定义容器名，-d：后台运行，image-name：指定镜像模板&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;列表&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker ps&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;查看运行中的容器，-a：查看所有容器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;停止&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker stop container-name/container-id&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;停止当前你运行的容器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;启动&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker start container-name/container-id&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;启动容器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;删除&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;docker rm container-id&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;s删除指定容器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;端口映射&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-p 6379:6379&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;-p：主机端口映射到容器内部端口&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d -p 8888:8080 tomcat&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;-d：后台运行，-p：端口映射&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
