<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MinIO on L1nker4&#39;s Blog | 格木观云</title>
    <link>http://localhost:1313/categories/minio/</link>
    <description>Recent content in MinIO on L1nker4&#39;s Blog | 格木观云</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Aug 2022 21:12:54 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/minio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MinIO的分布式存储实践方案</title>
      <link>http://localhost:1313/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/minio/minio%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%A1%88/</link>
      <pubDate>Fri, 19 Aug 2022 21:12:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/minio/minio%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;&#xA;&lt;p&gt;MinIO是一个开源的分布式对象存储组件，它兼容Amazon S3 API，适合于存储大容量的非结构化数据，支持单个对象最大5TB。&lt;/p&gt;&#xA;&lt;p&gt;MinIO特点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;部署简单，仅需要单独一个二进制文件&lt;/li&gt;&#xA;&lt;li&gt;支持纠删码机制，能恢复部分数据块丢失的情况。&lt;/li&gt;&#xA;&lt;li&gt;读写性能高&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/image-20220924181123151.png&#34; alt=&#34;MinIO Benchmark&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;基础原理&#34;&gt;基础原理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;纠删码&#34;&gt;纠删码&lt;/h3&gt;&#xA;&lt;p&gt;纠删码是分布式存储领域常见的一种冗余技术，与副本机制相对比，纠删码拥有更高的磁盘利用率。纠删码的基本原理：通过&lt;strong&gt;纠删码算法&lt;/strong&gt;对原始数据进行计算，得到冗余的编码数据，并将数据和冗余编码一起存储，如果未来存储介质发生故障，导致其中部分数据出错，此时可以通过对应的重构算法，&lt;strong&gt;解码&lt;/strong&gt;出完整的原始数据，以达到容错的目的。即&lt;strong&gt;总数据块 = 原始块 + 校验快&lt;/strong&gt;($n = k + m$)。纠删码技术的磁盘利用率为$k / (k + m)$，允许总数据块中任意m个数据块损坏。&lt;/p&gt;&#xA;&lt;p&gt;上面提到的n、m的比值，是衡量纠删码的核心参数，这个值被称为冗余度，冗余度越高（校验快越多），允许丢失的数据块可以越多，同时数据存储成本也就越高。k值决定数据分块的粒度，k越小，数据分散度越小、重建代价越大。k值越大，数据拷贝的负载越大。常见的公有云独享存储的冗余度一般在&lt;code&gt;1.2-1.4&lt;/code&gt;左右。&lt;/p&gt;&#xA;&lt;p&gt;目前常用的纠删码算法：&lt;code&gt;Reed-Solomon&lt;/code&gt;，它有两个参数n和m，记为$RS(n , m)$。n代表原始数据块个数。m代表校验块个数。&lt;/p&gt;&#xA;&lt;p&gt;下图中是使用16块磁盘作为存储设备的情况，假设此时MinIOn持有16个磁盘，MinIO会将其中8块作为数据盘，另外八块作为校验盘，数据盘存储对象的原始数据，校验盘存储对象的校验数据。纠删码默认配置是&lt;strong&gt;1:1&lt;/strong&gt;，也就是将所有磁盘中的一半作为数据盘，一半做为校验盘。同时MinIO使用HighwayHash编码计算数据块的hash值，获取文件时会计算hash值来校验文件的准确性。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/erasure-code1.jpg&#34; alt=&#34;纠删码的磁盘布局&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;纠删码缺点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要读取其他的数据块和校验块&lt;/li&gt;&#xA;&lt;li&gt;编码解码需要消耗CPU资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;纠删码优点&#xA;&lt;ul&gt;&#xA;&lt;li&gt;副本机制对于大文件机极其消耗磁盘空间，纠删码可以通过较少的磁盘冗余，较为高效的解决数据丢失的问题。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;应用场景&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于不被长期访问的冷数据，采用纠删码技术，可以大大减少副本数量。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;server-pool&#34;&gt;Server Pool&lt;/h3&gt;&#xA;&lt;p&gt;使用minio server指令创建的MinIO节点集合，提供对象存储和处理请求的功能。&lt;/p&gt;&#xA;&lt;p&gt;MinIO可以通过增加Server Pool的方式，实现集群的横向扩展。&lt;/p&gt;&#xA;&lt;p&gt;当有新的Server Pool加入Cluster，存储的元数据会进行同步，但是其他Server Pool已存储对象不会同步。&lt;/p&gt;&#xA;&lt;p&gt;举例：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;minio server https://minio{1&amp;hellip;4}.example.net/mnt/disk{1&amp;hellip;4}代表一个Server Pool，其中有四个server节点各有4块磁盘。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;minio server https://minio{1&amp;hellip;4}.example.net/mnt/disk{1&amp;hellip;4} https://minio{5&amp;hellip;8}.example.net/mnt/disk{1&amp;hellip;4}代表有两个Server Pool。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;MinIO选择Server Pool策略；选择剩余空间最大的Server Pool进行存储。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/image-20221113153730493.png&#34; alt=&#34;MinIO选择策略&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;存储级别&#34;&gt;存储级别&lt;/h3&gt;&#xA;&lt;p&gt;MinIO目前支持两种存储级别：Reduced Redundancy和Standard，提供两种不同的级别来修改数据块和校验块的比例。MinIO使用&lt;strong&gt;EC:N&lt;/strong&gt;来表示EC Set中存储校验块的磁盘数量，N越大，容错能力越强，但占用磁盘空间越多。&lt;/p&gt;&#xA;&lt;p&gt;可以通过在S3 Put API中添加x-amz-storage-class参数来指定当前文件的存储级别。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Standard：默认使用的存储级别，EC:N参数与Set中磁盘数量有关。可通过环境变量MINIO_STORAGE_CLASS_STANDARD=EC:N来设置，N不能大于磁盘数量的一半。&lt;/li&gt;&#xA;&lt;li&gt;Reduced Redundancy：使用比Standard级别更少的磁盘数量存储校验块。通过环境变量MINIO_STORAGE_CLASS_RRS=EC:N来设置。默认参数为EC:2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/image-20221113154043570.png&#34; alt=&#34;存储级别设置&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
