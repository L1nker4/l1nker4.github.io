<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paper Reading on l1nker4&#39;s Blog</title>
    <link>http://localhost:1313/categories/paper-reading/</link>
    <description>Recent content in Paper Reading on l1nker4&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Dec 2023 22:57:50 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/paper-reading/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OSDI&#39;10 《Finding a needle in Haystack Facebook’s photo storage》</title>
      <link>http://localhost:1313/posts/paper-reading/finding-a-needle-in-haystack-facebooks-photo-storage/</link>
      <pubDate>Fri, 08 Dec 2023 22:57:50 +0000</pubDate>
      <guid>http://localhost:1313/posts/paper-reading/finding-a-needle-in-haystack-facebooks-photo-storage/</guid>
      <description>&lt;h2 id=&#34;业务量级&#34;&gt;业务量级&lt;/h2&gt;&#xA;&lt;p&gt;FaceBook存储超过2600亿张图片，20PB，一周存储10亿张，峰值每秒100W图片。一次性写、不修改、很少删除的图片数据。&lt;/p&gt;&#xA;&lt;h2 id=&#34;原始设计的挑战&#34;&gt;原始设计的挑战&lt;/h2&gt;&#xA;&lt;p&gt;访问webserver，获取图片URL，先去CDN获取，cache hit则返回，miss则去Storage加载到CDN再返回。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/image-20231125152100170.png&#34; alt=&#34;Typical Design&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当文件存储NAS的文件夹存储数千个文件时，请求单个图片的请求会产生多于10次的磁盘IO，即使文件夹内文件数量下降到几百时，还是会产生三次磁盘IO。&lt;/p&gt;&#xA;&lt;p&gt;可以看出，原始架构的性能瓶颈：读操作存在多次磁盘IO。&lt;/p&gt;&#xA;&lt;p&gt;传统POSIX filesystem缺点：文件元信息，例如权限等信息占用较多存储成本。对于巨量数据的情况，成本极大，对于NAS，一个文件读写需要三次磁盘IO：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;根据filename获取inode number&lt;/li&gt;&#xA;&lt;li&gt;读取指定inode&lt;/li&gt;&#xA;&lt;li&gt;读取文件信息本身&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;设计目标&#34;&gt;设计目标&lt;/h2&gt;&#xA;&lt;p&gt;Haystack结构实现的四个目标：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;高吞吐量与低延迟：所有metadata都存储在内存，最多执行一次磁盘IO&lt;/li&gt;&#xA;&lt;li&gt;容错：异地容灾&lt;/li&gt;&#xA;&lt;li&gt;低成本&lt;/li&gt;&#xA;&lt;li&gt;简单&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;新设计&#34;&gt;新设计&lt;/h2&gt;&#xA;&lt;p&gt;Haystack主要解决上述架构的瓶颈问题：多次磁盘IO，关键方法：将多个图片存储为单个大文件，由此仅需要保存大文件的文件元信息。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/image-20231125190839452.png&#34; alt=&#34;Haystack架构&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Haystack架构包括以下三部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Haystack Store：真正存储文件的组件，管理文件系统元信息。使用物理volume进行管理，可以将不同主机上的某些物理volume组成一个逻辑volume，这样就可以产生多份副本，进行容错或分流。&lt;/li&gt;&#xA;&lt;li&gt;Haystack Directory：管理逻辑到物理volume的映射关系，以及一些应用元信息，例如图片到逻辑volume的映射，逻辑volume的空闲空间等信息。&lt;/li&gt;&#xA;&lt;li&gt;Haystack Cache：内部缓存CDN，减少对外部CDN的依赖。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;浏览器从Haystack Directory组件获取到的URL如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://〈CDN〉/〈Cache〉/〈Machine id〉/〈Logical volume, Photo〉&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CDN，Haystack Cache层如果hit cache就返回，否则去掉该层地址，请求转发到下一层。&lt;/p&gt;&#xA;&lt;h3 id=&#34;haystack-directory&#34;&gt;Haystack Directory&lt;/h3&gt;&#xA;&lt;p&gt;四个功能：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;逻辑volume到物理volume的映射。&lt;/li&gt;&#xA;&lt;li&gt;跨逻辑卷读写的负载均衡能力。&lt;/li&gt;&#xA;&lt;li&gt;决定一个请求是由CDN处理还是Cache处理。&lt;/li&gt;&#xA;&lt;li&gt;检查逻辑卷是否因为操作原因或达到存储容量导致read-only&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;haystack-cache&#34;&gt;Haystack Cache&lt;/h3&gt;&#xA;&lt;p&gt;从浏览器或CDN接收HTTP请求。该组件使用图片id定位数据，将其组织成了分布式hash table，如果cache miss，则去Haystack Store服务器获取图片信息。&lt;/p&gt;&#xA;&lt;p&gt;对图片进行cache的两个必要条件：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;请求直接来自浏览器而非CDN&lt;/li&gt;&#xA;&lt;li&gt;图片从可写服务器获取的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;haystack-store&#34;&gt;Haystack Store&lt;/h3&gt;&#xA;&lt;p&gt;每台存储服务器都维护了多个逻辑volume，每个volume都可以理解为一个大文件（100 GB ），文件名为/hay/haystack_&amp;lt;volume_id&amp;gt;，可以通过逻辑volume id和图片offset快速定位到图片信息，可以不通过磁盘IO读取图片（&lt;strong&gt;Q：为什么能不通过磁盘操作读取到磁盘数据？&lt;/strong&gt;），服务器都在内存中维护着物理卷对应文件描述符和图片id到文件系统元信息的映射关系&lt;/p&gt;&#xA;&lt;p&gt;具体的物理结构如下图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/image-20231205220244979.png&#34; alt=&#34;Haystack-Store&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;每台存储服务器代表着一个物理卷，同时也称为superblock，其中包括多个needle，每个needle存储着图片元信息和图片数据。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog-1251613845.cos.ap-shanghai.myqcloud.com/image-20231205222508419.png&#34; alt=&#34;fields-explanation&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;read&#34;&gt;Read&lt;/h4&gt;&#xA;&lt;p&gt;来自Cache服务器的读请求会有以下参数：逻辑volume id、key、alternate key、cookie，Store服务器首先从内存中查找对应元信息，然后读取图片数据，使用checksum进行校验后返回。&lt;/p&gt;&#xA;&lt;h4 id=&#34;write&#34;&gt;Write&lt;/h4&gt;&#xA;&lt;p&gt;写请求会包括以下参数：逻辑volume id、key、alternate key、cookie、data，Store服务器将数据组装成needle结构并追加到volume file中。如果(key, alternate key)唯一二元组存在重复问题，有两种情况：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
